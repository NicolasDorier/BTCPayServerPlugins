@using BTCPayServer.Abstractions.Extensions
@using BTCPayServer.Abstractions.Services
@using BTCPayServer.Client
@using BTCPayServer.Controllers
@using BTCPayServer.Data
@using BTCPayServer.Plugins.GhostPlugin.Data
@using Microsoft.AspNetCore.Routing
@model GhostSetting
@{
    ViewData.SetActivePage(PluginNavPages.Index, "Ghost");
    var ghostCredsSet = Model?.IntegratedAt.HasValue is true;
}

<div class="sticky-header">
    <h2 class="my-1">
        @ViewData["Title"]
        @* <small>
            <a href="https://docs.btcpayserver.org/Shopify" target="_blank" rel="noreferrer noopener" title="More information...">
                <vc:icon symbol="info" />
            </a>
        </small> *@
    </h2>
</div>

<partial name="_StatusMessage" />

@if (Model.HasWallet)
{
    <div class="row">
        <div class="col-xxl-constrain col-xl-8">
            <p>Connect BTCPay Server to your Ghost account to accept Bitcoin.</p>

            @if (!ViewContext.ModelState.IsValid)
            {
                <div asp-validation-summary="All"></div>
            }

            <form method="post" id="ghostForm">
                <div class="form-group">
                    <label asp-for="ShopName" class="form-label"></label>
                    <div class="input-group">
                        @if (!Model?.ShopName?.Contains(".") is true)
                        {
                            <span class="input-group-text">https://</span>
                        }
                        <input asp-for="ShopName" class="form-control" readonly="@ghostCredsSet" />

                        @* @if (!ghostCredsSet || !Model?.ShopName?.Contains(".") is true)
                        {
                            <span class="input-group-text">.ghost.io</span>
                        } *@
                    </div>
                    <span asp-validation-for="ShopName" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="AdminApiKey" class="form-label"></label>
                    <input asp-for="AdminApiKey" class="form-control" readonly="@ghostCredsSet" />
                    <span asp-validation-for="AdminApiKey" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="ContentApiKey" class="form-label"></label>
                    <input asp-for="ContentApiKey" class="form-control" type="password" value="@Model?.ContentApiKey" readonly="@ghostCredsSet" />
                    <span asp-validation-for="ContentApiKey" class="text-danger"></span>
                </div>

                @if (ghostCredsSet)
                {
                    <p class="alert alert-success">
                        Orders on <b>@Model.ShopName</b>.ghost.io will be marked as paid on successful invoice payment.
                        Started: @Model.IntegratedAt.Value.ToBrowserDate()
                    </p>

                    <button name="command" type="submit" class="btn btn-danger mt-3" value="GhostClearCredentials">
                        Stop Ghost calls and clear credentials
                    </button>
                }
                else
                {
                    <button name="command" type="submit" class="btn btn-primary mt-3" value="GhostSaveCredentials">
                        Save
                    </button>
                }
            </form>
        </div>
    </div>
}
else
{
    <div class="alert alert-warning alert-dismissible mb-4" role="alert">
        <p class="mb-0" style="font-size: 0.9rem;">
            To proceed with Ghost plugin on this store, you need to
            <a href="@Url.Action(nameof(UIStoresController.SetupWallet), "UIStores", new { cryptoCode = Model.CryptoCode, storeId = Model.StoreId })" class="alert-link">
                set up a wallet
            </a>
            first.
        </p>
    </div>
}

